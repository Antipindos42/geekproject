'''
1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
'''

def div(*args):
    try:
        a = int(input("Input dividend "))
        b = int(input("Input divider "))
        res = a / b
    except ValueError:
        return 'Value error'
    except ZeroDivisionError:
        return "Wrong devider! You can't use zero as a devider"

    return res


print(f'result  {div()}')


'''
2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
имя, фамилия, год рождения, город проживания, email, телефон.
Функция должна принимать параметры как именованные аргументы. Осуществить вывод данных о пользователе одной строкой.
'''

def user(name, lastname, year_of_birth, city, email, phone):
    return print(f'Имя: {name}, Фамилия: {lastname}, Год рождения: {year_of_birth}, '
                 f'Город проживания: {city}, Email: {email}, Телефон: {phone}.')


user(
    name=input('Как Вас зовут: '),
    lastname=input('Введите Вашу Фамилию: '),
    year_of_birth=input('В каком году Вы родились: '),
    city=input('Город проживания: '),
    email=input('Электронная почта: '),
    phone=input('Номер телефона: '),
    
'''
3.  Реализовать функцию my_func(), которая принимает три позиционных аргумента, 
 возвращает сумму наибольших двух аргументов.  
'''

def my_func(a, b, c):
    print(f'Сумма двух наибольших чисел равна: {a + b + c - min([a, b, c])}')


my_func(
    int(input('Введите первое число: ')),
    int(input('Введите второе число: ')),
    int(input('Введите третье число: ')),
)

    
'''
4. Программа принимает действительное положительное число x и целое отрицательное число y. 
Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). 
При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
'''

#цикл

def my_func_2(a, n):
    res = 1
    for i in range(abs(n)):
        res *= a
    if n >= 0:
        return res
    else:
        return 1 / res


print(my_func_2(float(input("Первое значение - ")), int(input("Второе значение - "))))


#оператор **

def my_func_2(x, y):
    return x ** abs(y)


print(my_func_2(float(input("Первое значение - ")), int(input("Второе значение - "))))



'''
5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
При нажатии Enter должна выводиться сумма чисел. 
может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. 
Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
'''
# эта библиотечная функция позволяет обрабатывать
# hax, bin, oct, int, float и complex числа
# from ast import literal_eval

from my_functions import my_sum

stop_index = None
result = 0


def convert_item(item: str) -> (int, float):
    """
    Преобразование строки в число
    :param item: строковое представление числа
    :return: число
    """
    try:
        float_item = float(item)
        int_item = int(item.split('.')[0])
    except ValueError:
        raise

    if float_item == int_item:
        return int_item
    else:
        return float_item


if __name__ == '__main__':
    while stop_index is None:
        data = input('Пожалуйста введите числа разделённые\n'
                     'пробелами (допускаются int, float): ').split()

        try:
            stop_index = data.index('q')
            data = data[:stop_index]
        except ValueError:
            pass

        try:
            data = [convert_item(i) for i in data]
        except ValueError:
            print("Введенные данные содержат неверный тип")
            continue

        result += my_sum(data)

        print(result)

'''
6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой.
Например, print(int_func(‘text’)) -> Text.
'''

def int_func(word):
    first_letter_small = word[0]
    first_letter_big = chr(ord(first_letter_small) - ord('a') + ord('A'))
    return first_letter_big + word[1:]


source = input().split()
res = []
for word in source:
    res.append(int_func(word))
print(' '.join(res))

'''
Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре. 
Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().
'''

def int_func(S):
    return S.title()


S = input()
print(int_func(S))
 
  
Альтернатива:

"""

from sys import argv


def int_func(word: str) -> str:
    """
    Переводит первый символ слова в верхний регистр
    :param word: слово для преобразования
    :return: преобразованное слово
    """
    if not word.isascii() and not word.isalpha():
        raise ValueError(f'Слово {word} содержит не ASCII символы, или латинские символы')

    if not word.islower():
        raise ValueError(f'Слово {word} содержит не только строчные символы')

    return word.title()


def run_help():
    print(f"Usage: python3 {argv[0]} 'word1 word2'")
    exit(0)


if __name__ == '__main__':
    try:
        words = argv[1].split()
        if len(words) < 2:
            raise RuntimeError()
    except (IndexError, RuntimeError):
        print('Неверный параметр запучска')
        run_help()

    print(' '.join([int_func(item) for item in words]))

