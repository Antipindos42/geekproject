'''
1. Создать список и заполнить его элементами различных типов данных. 
Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. 
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
'''

super_list = [100, 'Hello', None, True, 2.3, (2, 3)]
for i in super_list:
    print(f'{i} is {type(i)}')
    
    
 '''
 2. Для списка реализовать обмен значений соседних элементов, т.е. 
 Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
 При нечетном количестве элементов последний сохранить на своем месте. 
 Для заполнения списка элементов необходимо использовать функцию input().
 '''
 
el_count = int(input("Введите количество элементов списка "))
my_list = []
i = 0
while i < el_count:
    my_list.append(input("Введите следующее значение списка "))
    i += 1
j = 0
for i in range(int(len(my_list) / 2)):
    my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]
    j += 2
print(my_list)


 '''
3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и через dict.
 '''
#dict
seasons: dict[str, tuple[int, int, int]] = {'Winter': (1, 2, 12),
          'Spring': (3, 4, 5),
          'Summer': (6, 7, 8),
          'Autumn': (9, 10, 11)}

month = int(input('Choose a month: '))
for key in seasons.keys():
    if month in seasons[key]:
        print(key)
else:
    print('ERROR')


# list

month = int(input('Choose a month: '))
if month in (1, 2, 12):
    print('winter')
elif month in (3, 4, 5):
    print('spring')
elif month in (6, 7, 8):
    print('summer')
elif month in (9, 10, 11):
    print('fall')
else:
    print('ERROR')


 '''
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
Если в слово длинное, выводить только первые 10 букв в слове.
 '''

my_str = input("Введите строку из нескольких слов, разделённых пробелами: ")
my_word = []

for j in range(my_str.count(' ') + 1):
    my_word = my_str.split()

for i, my_str in enumerate(my_word):
    print(i + 1, my_str[0:10])
    
   
'''
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент рейтинга.
Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
 '''

number = int(input("Введите натуральное число: "))
my_reyting = [7, 4, 3, 2]
c = my_reyting.count(number)
for el in my_reyting:
    if c > 0:
        i = my_reyting.index(number)
        my_reyting.insert(i + c, number)
        break
    else:
        if number > el:
            j = my_reyting.index(el)
            my_reyting.insert(j, number)
print(my_reyting)

   
'''
6. *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
Каждый кортеж хранит информацию об отдельном товаре.
В кортеже должно быть два элемента —номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). 
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
'''

goods = []
features = {'name': '', 'price': '', 'quantity': '', 'unit': ''}
analytics = {'name': [], 'price': [], 'quantity': [], 'unit': []}
num = 0
feature_ = None
control = None
while True:
    control = input("For quit press 'Q', for continue press 'Enter', for analytics press 'A'").upper()
    if control == 'Q':
        break
    num += 1
    if control == 'A':
        print(f'\n Current analytics \n {"-" * 30}')
        for key, value in analytics.items():
            print(f'{key[:25]:>30}: {value}')
            print("-" * 30)
    for f in features.keys():
        feature_ = input(f'Input feature "{f}"')
        features[f] = int(feature_) if (f == 'price' or f == 'quantity') else feature_
        analytics[f].append(features[f])
    goods.append((num, features))

goods = int(input("Введите количество товара "))
n = 1
my_dict = []
my_list = []
my_analyse = {}
while n <= goods:
    my_dict = dict({'название': input("введите название "), 'цена': input("Введите цену "),
                    'количество': input('Введите количество '), 'eд': input("Введите единицу измерения ")})
    my_list.append((n, my_dict))
    n += 1
    my_analyse = dict(
        {'название': my_dict.get('название'), 'цена': my_dict.get('цена'), 'количество': my_dict.get('количество'),
         'ед': my_dict.get('ед')})
print(my_list)
print(my_analyse)

